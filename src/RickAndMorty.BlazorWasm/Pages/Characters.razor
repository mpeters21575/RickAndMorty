@page "/"
@using RickAndMorty.BlazorWasm.Models
@using RickAndMorty.BlazorWasm.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject ICharacterService CharacterService
@inject INotificationService NotificationService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@implements IAsyncDisposable

<PageTitle>Characters</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">
    <MudIcon Icon="@Icons.Material.Filled.People" Class="mr-2" />
    Rick and Morty Characters
</MudText>

<MudTable Items="@_characters" 
          Dense="true" 
          Hover="true" 
          Striped="true"
          Loading="@_loading"
          LoadingProgressColor="Color.Primary"
          @bind-SelectedItem="_selectedCharacter"
          Height="calc(100vh - 320px)"
          FixedHeader="true"
          OnRowClick="@((TableRowClickEventArgs<CharacterDto> args) => OnRowClick(args))"
          Virtualize="false"
          AllowUnsorted="true"
          RowsPerPage="int.MaxValue"
          T="CharacterDto">
    <ToolBarContent>
        <MudTextField @bind-Value="_searchString" 
                      Placeholder="Search characters..." 
                      Adornment="Adornment.Start" 
                      AdornmentIcon="@Icons.Material.Filled.Search" 
                      IconSize="Size.Medium"
                      Class="mt-0"
                      Immediate="false"
                      OnKeyDown="OnSearchKeyDown" />
        <MudSpacer />
        <MudTextField @bind-Value="_speciesFilter" 
                      Placeholder="Species filter..." 
                      Adornment="Adornment.Start" 
                      AdornmentIcon="@Icons.Material.Filled.Pets" 
                      IconSize="Size.Medium"
                      Class="mt-0 mr-2"
                      Immediate="false"
                      OnKeyDown="OnSearchKeyDown" />
        <MudButton Variant="Variant.Outlined" 
                   Color="Color.Secondary"
                   StartIcon="@Icons.Material.Filled.FilterAlt"
                   OnClick="ApplyFilters"
                   Class="mr-2">
            Apply Filters
        </MudButton>
        <MudButton Variant="Variant.Outlined" 
                   Color="Color.Default"
                   StartIcon="@Icons.Material.Filled.Clear"
                   OnClick="ClearFilters"
                   Class="mr-2">
            Clear
        </MudButton>
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="OpenAddDialog">
            Add Character
        </MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<CharacterDto, object>(x => x.Id)">ID</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CharacterDto, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CharacterDto, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CharacterDto, object>(x => x.Species)">Species</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CharacterDto, object>(x => x.OriginName)">Origin</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">
            @if (!string.IsNullOrEmpty(context.ImageUrl))
            {
                <MudAvatar Size="Size.Small">
                    <MudImage Src="@context.ImageUrl" Alt="@context.Name" />
                </MudAvatar>
            }
            else
            {
                <MudAvatar Color="Color.Primary" Size="Size.Small">
                    @context.Name[0]
                </MudAvatar>
            }
            <span class="ml-2">@context.Id</span>
        </MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Status">
            <MudChip Size="Size.Small" 
                     Color="@GetStatusColor(context.Status)"
                     Icon="@Icons.Material.Filled.Circle"
                     T="string">
                @context.Status
            </MudChip>
        </MudTd>
        <MudTd DataLabel="Species">
            <MudText Typo="Typo.body2">
                <MudIcon Icon="@Icons.Material.Filled.Pets" Size="Size.Small" Class="mr-1" />
                @context.Species
            </MudText>
        </MudTd>
        <MudTd DataLabel="Origin">
            <MudText Typo="Typo.body2">
                <MudIcon Icon="@Icons.Material.Filled.Public" Size="Size.Small" Class="mr-1" />
                @context.OriginName
            </MudText>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No characters found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading characters...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="pa-2">
            <MudText Typo="Typo.body2">
                @if (_characters.Count > 0)
                {
                    <text>Showing @((_currentPage - 1) * _pageSize + 1) - @((_currentPage - 1) * _pageSize + _characters.Count) of @_totalCount characters</text>
                }
                else
                {
                    <text>No characters to display</text>
                }
            </MudText>
            <MudStack Row="true" Spacing="2">
                <MudIconButton Icon="@Icons.Material.Filled.FirstPage" 
                               OnClick="() => GoToPage(1)" 
                               Disabled="@(!_hasPreviousPage)" 
                               Size="Size.Small" />
                <MudIconButton Icon="@Icons.Material.Filled.NavigateBefore" 
                               OnClick="PreviousPage" 
                               Disabled="@(!_hasPreviousPage)" 
                               Size="Size.Small" />
                <MudText Typo="Typo.body2" Class="mx-4">
                    Page @_currentPage of @_totalPages
                </MudText>
                <MudIconButton Icon="@Icons.Material.Filled.NavigateNext" 
                               OnClick="NextPage" 
                               Disabled="@(!_hasNextPage)" 
                               Size="Size.Small" />
                <MudIconButton Icon="@Icons.Material.Filled.LastPage" 
                               OnClick="() => GoToPage(_totalPages)" 
                               Disabled="@(!_hasNextPage)" 
                               Size="Size.Small" />
            </MudStack>
        </MudStack>
    </PagerContent>
</MudTable>

@code {
    private List<CharacterDto> _characters = new();
    private CharacterDto? _selectedCharacter;
    private bool _loading = true;
    private string _searchString = string.Empty;
    private string _speciesFilter = string.Empty;
    private string? _statusFilter;
    private HubConnection? _hubConnection;

    private int _currentPage = 1;
    private int _pageSize = 50;
    private int _totalCount = 0;
    private int _totalPages = 0;
    private bool _hasPreviousPage = false;
    private bool _hasNextPage = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCharactersAsync();
        await InitializeSignalR();
    }

    private async Task InitializeSignalR()
    {
        var apiBaseUrl = Configuration["ApiBaseUrl"] ?? "https://localhost:7274";
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"{apiBaseUrl}/hubs/character")
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string, string>("CharacterAdded", async (characterName, imageUrl) =>
        {
            NotificationService.AddNotification(characterName, imageUrl);
            await InvokeAsync(StateHasChanged);
            await LoadCharactersAsync();
        });

        _hubConnection.On<string>("CharacterMonitorTest", async (message) =>
        {
            NotificationService.AddNotification("Monitor Test");
            Snackbar.Add($"Monitor Test: {message}", Severity.Info);
            await InvokeAsync(StateHasChanged);
        });

        try
        {
            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to connect to notifications: {ex.Message}", Severity.Warning);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task LoadCharactersAsync()
    {
        try
        {
            _loading = true;
            StateHasChanged();
            
            var response = await CharacterService.GetAllCharactersAsync(_currentPage, _pageSize);
            
            _characters = response.Data;
            _totalCount = response.TotalCount;
            _totalPages = response.TotalPages;
            _hasPreviousPage = response.HasPreviousPage;
            _hasNextPage = response.HasNextPage;
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load characters: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task GoToPage(int page)
    {
        if (page < 1 || page > _totalPages) return;
        
        _currentPage = page;
        await LoadCharactersAsync();
    }

    private async Task NextPage()
    {
        if (_hasNextPage)
        {
            _currentPage++;
            await LoadCharactersAsync();
        }
    }

    private async Task PreviousPage()
    {
        if (_hasPreviousPage)
        {
            _currentPage--;
            await LoadCharactersAsync();
        }
    }

    private async Task ApplyFilters()
    {
        try
        {
            _loading = true;
            
            var name = string.IsNullOrWhiteSpace(_searchString) ? null : _searchString.Trim();
            var status = string.IsNullOrWhiteSpace(_statusFilter) ? null : _statusFilter;
            var species = string.IsNullOrWhiteSpace(_speciesFilter) ? null : _speciesFilter.Trim();

            _characters = await CharacterService.GetFilteredCharactersAsync(name, status, species);
            _totalCount = _characters.Count;
            _currentPage = 1;
            _totalPages = 1;
            _hasPreviousPage = false;
            _hasNextPage = false;
            
            Snackbar.Add($"Found {_characters.Count} character(s)", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to filter characters: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ClearFilters()
    {
        _searchString = string.Empty;
        _speciesFilter = string.Empty;
        _statusFilter = null;
        _currentPage = 1;
        await LoadCharactersAsync();
        Snackbar.Add("Filters cleared", Severity.Info);
    }

    private async Task OnSearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ApplyFilters();
        }
    }

    private Color GetStatusColor(string status) => status.ToLower() switch
    {
        "alive" => Color.Success,
        "dead" => Color.Error,
        _ => Color.Default
    };

    private async Task OpenAddDialog()
    {
        var dialog = await DialogService.ShowAsync<AddCharacterDialog>("Add New Character");
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is CreateCharacterRequest request)
        {
            try
            {
                await CharacterService.CreateCharacterAsync(request);
                Snackbar.Add($"Character '{request.Name}' added successfully!", Severity.Success);
                await LoadCharactersAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to add character: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task OnRowClick(TableRowClickEventArgs<CharacterDto> args)
    {
        var parameters = new DialogParameters<CharacterDetailsDialog>
        {
            { x => x.Character, args.Item }
        };

        var options = new DialogOptions 
        { 
            MaxWidth = MaxWidth.Medium, 
            FullWidth = true,
            CloseButton = true
        };

        await DialogService.ShowAsync<CharacterDetailsDialog>($"Character Details", parameters, options);
    }
}