@using RickAndMorty.BlazorWasm.Services
@inject INotificationService NotificationService
@implements IDisposable

<MudMenu AnchorOrigin="Origin.BottomRight" 
         TransformOrigin="Origin.TopRight"
         Dense="true"
         @bind-Open="_isOpen"
         ActivationEvent="@MouseEvent.LeftClick">
    <ActivatorContent>
        <MudBadge Content="@NotificationService.UnreadCount"
                  Overlap="true"
                  Color="Color.Error"
                  Visible="@(NotificationService.UnreadCount > 0)"
                  Class="mx-6 my-4">
            <MudIconButton Icon="@Icons.Material.Filled.Notifications"
                           Color="Color.Inherit"
                           Size="Size.Medium"/>
        </MudBadge>
    </ActivatorContent>
    <ChildContent>
        <MudPaper Style="width: 380px; max-height: 500px;" Elevation="0">
            @if (NotificationService.Notifications.Any())
            {
                <MudList T="string" Dense="true" Style="max-height: 400px; overflow-y: auto;">
                    <MudListSubheader>
                        <div class="d-flex justify-space-between align-center" style="width: 100%;">
                            <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                                <strong>New Characters</strong>
                            </MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Clear" 
                                          Size="Size.Small" 
                                          OnClick="@ClearNotifications"
                                          Title="Clear all notifications" />
                        </div>
                    </MudListSubheader>
                    <MudDivider />
                    
                    @foreach (var notification in NotificationService.Notifications)
                    {
                        <MudListItem T="string" Style="@(!notification.IsRead ? "background-color: rgba(0, 255, 65, 0.05);" : "")">
                            <div class="d-flex align-center">
                                @if (!string.IsNullOrEmpty(notification.ImageUrl))
                                {
                                    <MudAvatar Size="Size.Medium" Class="mr-3">
                                        <MudImage Src="@notification.ImageUrl" Alt="@notification.CharacterName" />
                                    </MudAvatar>
                                }
                                else
                                {
                                    <MudAvatar Color="Color.Primary" Size="Size.Medium" Class="mr-3">
                                        @notification.CharacterName[0]
                                    </MudAvatar>
                                }
                                <div class="flex-grow-1">
                                    <MudText Typo="Typo.body2">
                                        <strong>@notification.CharacterName</strong> was added
                                    </MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @GetRelativeTime(notification.Timestamp)
                                    </MudText>
                                </div>
                                @if (!notification.IsRead)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.FiberManualRecord" 
                                            Color="Color.Success" 
                                            Size="Size.Small" />
                                }
                            </div>
                        </MudListItem>
                        <MudDivider />
                    }
                </MudList>
            }
            else
            {
                <div class="pa-8 d-flex flex-column align-center">
                    <MudIcon Icon="@Icons.Material.Filled.NotificationsNone" 
                            Size="Size.Large" 
                            Color="Color.Secondary"
                            Style="font-size: 4rem;" />
                    <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mt-4">
                        No new notifications
                    </MudText>
                </div>
            }
        </MudPaper>
    </ChildContent>
</MudMenu>

@code {
    private bool _isOpen;

    protected override void OnInitialized()
    {
        NotificationService.OnNotificationsChanged += OnNotificationChanged;
    }

    private void OnNotificationChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_isOpen && NotificationService.UnreadCount > 0)
        {
            NotificationService.MarkAllAsRead();
        }
    }

    private void ClearNotifications()
    {
        NotificationService.ClearAll();
        _isOpen = false;
    }

    private string GetRelativeTime(DateTime timestamp)
    {
        var timeSpan = DateTime.UtcNow - timestamp;

        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        return $"{(int)timeSpan.TotalDays}d ago";
    }

    public void Dispose()
    {
        NotificationService.OnNotificationsChanged -= OnNotificationChanged;
    }
}